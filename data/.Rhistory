shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
library(stringr)
a<-'hola hola hola '
b<-str_replace_all(a, fixed(" "), "")
b
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
library(stringr)
a<-'541234'
b<-ifelse(left(a,2)='54',substring(a, 4),a)
library(stringr)
a<-'541234'
b<-ifelse(left(a,2)=='54',substring(a, 4),a)
a<-'541234'
b<-sub("^54", "", a)
b
a<-'5412354'
b<-sub("^54", "", a)
b
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app/app')
shiny::runApp('C:/Users/alan/Desktop/app')
shiny::runApp('C:/Users/alan/Desktop/app new')
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-longitud/tamano_bloque
lista<-rep(1:cantidad_bloques, each=tamano_bloque)
}
a<-separador(10,2)
a
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-longitud/tamano_bloque
lista<-rep(1:cantidad_bloques, each=tamano_bloque)
}
a<-separador(11,2)
a
max(a)
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<-longitud - cantidad_bloques * tamano_bloque
lista_resto<-rep(max(lista_inicial)+1, each=resto)
lista_total<-c(lista_inicial,lista_resto)
return lista_total
}
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<-longitud - cantidad_bloques * tamano_bloque
lista_resto<-rep(max(lista_inicial)+1, each=resto)
lista_total<-c(lista_inicial,lista_resto)
return lista_total
}
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
}
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<- longitud - cantidad_bloques * tamano_bloque
}
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<- longitud - cantidad_bloques * tamano_bloque
inicio_lista_resto<-max(lista_inicial)+1
}
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<- longitud - cantidad_bloques * tamano_bloque
inicio_lista_resto<-max(lista_inicial)+1
lista_resto<-rep(inicio_lista_resto, resto)
}
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<- longitud - cantidad_bloques * tamano_bloque
inicio_lista_resto<-max(lista_inicial)+1
lista_resto<-rep(inicio_lista_resto, resto)
lista_total<-c(lista_inicial,lista_resto)
return lista_total
}
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<- longitud - cantidad_bloques * tamano_bloque
inicio_lista_resto<-max(lista_inicial)+1
lista_resto<-rep(inicio_lista_resto, resto)
}
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<- longitud - cantidad_bloques * tamano_bloque
inicio_lista_resto<-max(lista_inicial)+1
lista_resto<-rep(inicio_lista_resto, resto)
lista_total<-c(lista_inicial,lista_resto)
}
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<- longitud - cantidad_bloques * tamano_bloque
inicio_lista_resto<-max(lista_inicial)+1
lista_resto<-rep(inicio_lista_resto, resto)
lista_total<-c(lista_inicial,lista_resto)
}
a<-separador(10,2)
a
separador<-function(longitud,tamano_bloque){
cantidad_bloques<-floor(longitud/tamano_bloque)
lista_inicial<-rep(1:cantidad_bloques, each=tamano_bloque)
resto<- longitud - cantidad_bloques * tamano_bloque
inicio_lista_resto<-max(lista_inicial)+1
lista_resto<-rep(inicio_lista_resto, resto)
lista_total<-c(lista_inicial,lista_resto)
}
a<-separador(11,2)
a
a<-separador(11,3)
a
shiny::runApp('C:/Users/alan/Desktop/app new')
shiny::runApp('C:/Users/alan/Desktop/app new')
shiny::runApp('C:/Users/alan/Desktop/app new')
shiny::runApp('C:/Users/alan/Desktop/app new')
shiny::runApp('C:/Users/alan/Desktop/app new')
shiny::runApp('C:/Users/alan/Desktop/app new')
library(readxl)
a<-read_excel(C://Users/alan/Desktop/app new/data1.xlsx)
a<-read_excel(C:/Users/alan/Desktop/app new/data1.xlsx)
a<-read_excel(C:\Users\alan\Desktop\app new\data1.xlsx)
a<-read_excel('C:\Users\alan\Desktop\app new\data1.xlsx')
a<-read_excel('C:/Users/alan/Desktop/app new/data1.xlsx')
head(a)
a<-read_excel('C:/Users/alan/Desktop/app new/data1.xlsx')
email_ultimo<-'juliiparedesarbues@gmail.com'
fila_numero<-wich(a$email==email_ultimo)
fila_numero<-which(a$email==email_ultimo)
fila_numero
b<-a[1:fila_numero,]
b
shiny::runApp('C:/Users/alan/Desktop/app new')
shiny::runApp('C:/Users/alan/Desktop/app new')
test <- read.csv("C:/Users/alan/Desktop/funnelr/test.txt", header=FALSE)
View(test)
library(readxl)
mydata <- read_excel("C:/Users/alan/Desktop/funnelr/data")
library(readxl)
mydata <- read_excel("C:/Users/alan/Desktop/funnelr/data.xlsx")
print(mydata)
library(readxl)
mydata <- read_excel("C:/Users/alan/Desktop/funnelr/data.xlsx")
print(mydata)
funnel$pathString <- paste("funnel",
mydata$padre,
mydata$h1,
mydata$h2
sep = "/")
install.packages("data.tree")
library(readxl)
library(data.tree)
mydata <- read_excel("C:/Users/alan/Desktop/funnelr/data.xlsx")
print(mydata)
funnel$pathString <- paste("funnel",
mydata$padre,
mydata$h1,
mydata$h2
sep = "/")
library(readxl)
library(data.tree)
mydata <- read_excel("C:/Users/alan/Desktop/funnelr/data.xlsx")
print(mydata)
funnel$pathString <- paste("funnel",
mydata$padre,
mydata$h1,
mydata$h2,
sep = "/")
mydata$pathString <- paste("funnel",
mydata$padre,
mydata$h1,
mydata$h2,
sep = "/")
population <- as.Node(mydata)
print(population, "leads", "gestionads", "visits", limit = 20)
population <- as.Node(mydata)
print(population, "leads", "gestionads", "visits")
population <- as.Node(mydata)
print(population, "leads", "gestionados", "visits")
valor <- as.Node(mydata)
print(valor, "leads", "gestionados", "visits")
library(readxl)
library(data.tree)
mydata <- read_excel("C:/Users/alan/Desktop/funnelr/data.xlsx")
print(mydata)
mydata$pathString <- paste("funnel",
mydata$padre,
mydata$h1,
mydata$h2,
sep = "/")
valor <- as.Node(mydata)
print(valor, "leads", "gestionados", "visits")
mydata$pathString
valor <- as.Node(mydata)
valor
print(valor, "funnel","leads", "gestionados", "visits")
print(valor)
print(valor[leads])
print(valor['leads'])
valor <- as.Node(mydata)
print(valor, "funnel","leads", "gestionados", "visits","valor")
install.packages("treemap")
valor <- as.Node(mydata)
print(valor, "valor",limit=20)
funnel <- as.Node(mydata)
print(funnel, "valor",limit=20)
print(funnel$valor)
print(funnel$count)
plot(funnel)
library(readxl)
library(data.tree)
mydata <- read_excel("C:/Users/alan/Desktop/funnelr/data.xlsx")
print(mydata)
mydata$pathString <- paste("funnel",
mydata$padre,
mydata$h1,
mydata$h2,
mydata$valor,
sep = "/")
funnel <- as.Node(mydata)
#print(funnel, "valor",limit=20)
plot(funnel)
GetEdgeLabel <- function(node) {
if (!node$isRoot) {
label = paste0(node$padre, " (", node$valor, ")")
} else {
label = node$padre
}
return (label)
}
SetEdgeStyle(funnel, fontname = 'helvetica', label = GetEdgeLabel)
plot(funnel)
SetEdgeStyle(funnel, fontname = 'helvetica', label = funnel$valor)
plot(funnel)
mydata$pathString <- paste("funnel",
mydata$padre,
mydata$h1,
mydata$h2,
sep = "/")
funnel <- as.Node(mydata)
SetEdgeStyle(funnel, fontname = 'helvetica', label = funnel$valor)
plot(funnel)
GetEdgeLabel <- function(node) {
if (!node$isRoot) {
label = node$valor
} else {
label = node$padre
}
return (label)
}
SetEdgeStyle(funnel, fontname = 'helvetica', label = GetEdgeLabel)
plot(funnel)
GetEdgeLabel <- function(node) {
if (node$isRoot) {
label = node$valor
} else {
label = node$padre
}
return (label)
}
SetEdgeStyle(funnel, fontname = 'helvetica', label = GetEdgeLabel)
plot(funnel)
GetEdgeLabel <- function(node) {
if (!node$isRoot) {
label = node$valor
} #else {
#label = node$padre
#}
return (label)
}
SetEdgeStyle(funnel, fontname = 'helvetica', label = GetEdgeLabel)
plot(funnel)
GetEdgeLabel <- function(node) {
if (!node$isRoot) {
label = node$valor
}
#else {
#label = node$padre
#}
return (label)
}
SetEdgeStyle(funnel, fontname = 'helvetica', label = GetEdgeLabel)
plot(funnel)
GetEdgeLabel <- function(node) {
if (!node$isRoot) {
label = node$valor
}
#else {
#label = node$padre
#}
return (label)
}
SetEdgeStyle(funnel, fontname = 'helvetica', label = GetEdgeLabel)
plot(funnel)
GetEdgeLabel <- function(node) {
label = node$valor
return (label)
}
SetEdgeStyle(funnel, fontname = 'helvetica', label = GetEdgeLabel)
plot(funnel)
library(readxl)
library(data.tree)
mydata <- read_excel("C:/Users/alan/Desktop/funnelr/data.xlsx")
print(mydata)
mydata$pathString <- paste("funnel",
mydata$padre,
mydata$h1,
mydata$h2,
sep = "/")
funnel <- as.Node(mydata)
#print(funnel, "valor",limit=20)
GetEdgeLabel <- function(node) {
label = node$valor
return (label)
}
SetEdgeStyle(funnel, fontname = 'helvetica', label = GetEdgeLabel)
plot(funnel)
fileName <- system.file("extdata", "data.yaml", package="data.tree")
cat(readChar(fileName, file.info(fileName)$size))
library(data.tree)
fileName <- system.file("extdata", "data.yaml", package="data.tree")
cat(readChar(fileName, file.info(fileName)$size))
library(yaml)
library(data.tree)
fileName <- system.file("extdata", "data.yaml", package="data.tree")
cat(readChar(fileName, file.info(fileName)$size))
fileName
library(yaml)
library(data.tree)
mydata <- yaml.load("C:/Users/alan/Desktop/funnelr/data.yaml")
mydata
print(mydata)
mydata <- as.node(yaml.load("C:/Users/alan/Desktop/funnelr/data.yaml"))
library(yaml)
library(data.tree)
mydata <- as.node(yaml.load("C:/Users/alan/Desktop/funnelr/data.yaml"))
library(yaml)
mydata <- yaml.load("C:/Users/alan/Desktop/funnelr/data.yaml")
mydata
install.packages("networkD3")
library(networkD3)
URL <- paste0(
"https://cdn.rawgit.com/christophergandrud/networkD3/",
"master/JSONdata//flare.json")
## Convert to list format
Flare <- jsonlite::fromJSON(URL, simplifyDataFrame = FALSE)
# Use subset of data for more readable diagram
Flare$children = Flare$children[1:3]
diagonalNetwork(List = Flare, fontSize = 10, opacity = 0.9)
<html>
<head>
<html>
<head>
<title>Title</title>
</head>
<body>
<p>This is an R HTML document. When you click the <b>Knit HTML</b> button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:</p>
<!--begin.rcode
summary(cars)
end.rcode-->
<p>You can also embed plots, for example:</p>
<!--begin.rcode fig.width=7, fig.height=6
plot(cars)
end.rcode-->
</body>
</html>
install.packages("leaflet")
library(leaflet)
m <- m  %>%
addMarkers(lng = dc_hq$lon, lat = dc_hq$lat) %>%
setView(lat = 50.9, lng = 4.7, zoom = 5)
library(leaflet)
m <- leaflet()  %>%
addMarkers(lng = dc_hq$lon, lat = dc_hq$lat) %>%
setView(lat = 50.9, lng = 4.7, zoom = 5)
addMarkers(lng = 50.9, lat = 4.7) %>%
library(leaflet)
m <- leaflet()  %>%
addMarkers(lng = 50.9, lat = 4.7) %>%
setView(lat = 50.9, lng = 4.7, zoom = 5)
addProviderTiles("CartoDB")  %>%
library(leaflet)
m <- leaflet()  %>%
addProviderTiles("CartoDB")  %>%
addMarkers(lng = 50.9, lat = 4.7) %>%
setView(lat = 50.9, lng = 4.7, zoom = 5)
library(leaflet)
m <- leaflet()  %>%
addProviderTiles("CartoDB")  %>%
addMarkers(lng = 50.9, lat = 4.7) %>%
setView(lat = 50.9, lng = 4.7, zoom = 5)
print(m)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(blogdown)
blogdown::serve_site()
install.packages("reticulate")
```{pyton}
print('hola')
```
```{pyton}
5+5
```
a = 5+5
a.head()
```{pyton}
import seaborn as sns
iris = sns.load_dataset('iris')
iris.head()
```
version
getwd()
getwd
pwd
ls
setwd("C:/Users/alan/Desktop/cheatR/data")
install.packages("tidyverse")
library(tidyverse)
mtcars
nrow(mtcars)
a<-complete(mtcars, cyl, gear, carb)
a
a<-data.frame(v1=c('a','b','c'),v2=c(1,2,3))
a
b<-complete(a,v1,v2)
b
c<-complete(a,v1,v2)
c<-expand(a,v1,v2)
c
a<-data.frame(v1=c('a','b','c','a'),v2=c(1,2,3,2))
b<-expand(a,v1,v2)
b
c<-expand(a, nesting(v1,v2))
c
a
df <- tibble(
year   = c(2010, 2010, 2010, 2010, 2012, 2012, 2012),
qtr    = c(   1,    2,    3,    4,    1,    2,    3),
return = rnorm(7)
)
df
a<-df %>% expand(year, qtr)
a
b<-df %>% expand(year = 2010:2012, qtr)
b
c<-df %>% expand(year = full_seq(year, 1), qtr)
c
d<-df %>% complete(year = full_seq(year, 1), qtr)
d
df <- tibble(
year   = c(2010, NA, 2010, 2010, 2012, 2012, 2012),
qtr    = c(   NA,    2,    NA,    4,    1,    2,    3)
)
df
a<-drop_na(df, year)
a
a<-drop_na(df, year,qtr)
a
a<-fill(df, year)
a
a<-replace_na(df, list(qtr = 100))
a
a<-apply(mtcars,1,sum)
mtcars
b<-mtcars-a
a
head(a)
a<-apply(mtcars,2,sum)
a
c<-mtcars-a
c
install.packages("blogdown")
